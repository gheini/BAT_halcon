<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>****************************</c>
<c>* HSLU T&amp;A module TA.BA_CVIS</c>
<c>****************************</c>
<c></c>
<c>* read camera calibration data and measure real distances on plate</c>
<c></c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<c>* read image</c>
<l>read_image (Image, '../images/calib1.png')</l>
<c></c>
<c>* open window with correct size</c>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_display (Image)</l>
<c></c>
<c>* set display properties </c>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_set_colored (6)</l>
<l>dev_set_line_width(1)</l>
<l>dev_set_draw ('margin')</l>
<c></c>
<c>* read camera parameter</c>
<c></c>
<l>read_cam_par('UI-5130CP-M_calib_file.cal', CameraParameters)</l>
<c></c>
<c>* Create and setup the calibration model</c>
<c>* </c>
<c>* First, create the calibration data structure</c>
<l>create_calib_data ('calibration_object', 1, 1, CalibDataID)</l>
<c>* Specify the used calibration plane using the name of the</c>
<c>* description file</c>
<l>CalPlateDescr := 'calplate_reducted.cpd'</l>
<l>set_calib_data_calib_object (CalibDataID, 0, CalPlateDescr)</l>
<l>set_calib_data_cam_param (CalibDataID, 0, [], CameraParameters)</l>
<c></c>
<c>************ insert camera calibration verification here *************</c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="add_circle_with_hole_offset">
<interface>
<ic>
<par name="XOff" base_type="ctrl" dimension="0"/>
<par name="YOff" base_type="ctrl" dimension="0"/>
<par name="Radius" base_type="ctrl" dimension="0"/>
<par name="PointX" base_type="ctrl" dimension="0"/>
<par name="PointY" base_type="ctrl" dimension="0"/>
<par name="PointZ" base_type="ctrl" dimension="0"/>
<par name="PolySequence" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PointXOut" base_type="ctrl" dimension="0"/>
<par name="PointYOut" base_type="ctrl" dimension="0"/>
<par name="PointZOut" base_type="ctrl" dimension="0"/>
<par name="PolySequenceOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>PointXOut := PointX</l>
<l>PointYOut := PointY</l>
<l>PointZOut := PointZ</l>
<l>PolySequenceOut := PolySequence</l>
<l>* Radius := 1</l>
<l>gen_circle_contour_xld (ContCircle, 0.0, 0.0, Radius, 0, 6.28318, 'positive', 0.05 * Radius)</l>
<l>get_contour_xld (ContCircle, Row, Col)</l>
<l>RowH := (1.0 / 3.0) * Row</l>
<l>ColH := (1.0 / 3.0) * Col</l>
<c>* disp_object_model_3d can only handle convex polygons, so we</c>
<c>* have to triangulate this by hand</c>
<l>Sequence := []</l>
<l>Num := |Row|</l>
<l>Off := |PointX|</l>
<l>for Idx := 0 to Num - 2 by 1</l>
<l>    Sequence := [Sequence,3,Off + Idx,Off + Idx + Num,Off + Idx + 1]</l>
<l>    Sequence := [Sequence,3,Off + Idx + 1,Off + Idx + Num,Off + Idx + Num + 1]</l>
<l>endfor</l>
<l>Sequence := [Sequence,3,Off + Num - 1,Off + Num - 1 + Num,Off + 0]</l>
<l>Sequence := [Sequence,3,Off + 0,Off + Num,Off + Num + Num - 1]</l>
<c></c>
<l>Row := [Row,RowH] + XOff</l>
<l>Col := [Col,ColH] + YOff</l>
<c></c>
<l>PointXOut := [PointXOut,Row]</l>
<l>PointYOut := [PointYOut,Col]</l>
<l>tuple_gen_const (|Row|, 0, Zeros)</l>
<l>PointZOut := [PointZOut,Zeros]</l>
<c></c>
<l>PolySequenceOut := [PolySequenceOut,Sequence]</l>
<c></c>
<l>return ()</l>
</body>
<docu id="add_circle_with_hole_offset">
<parameters>
<parameter id="PointX"/>
<parameter id="PointXOut"/>
<parameter id="PointY"/>
<parameter id="PointYOut"/>
<parameter id="PointZ"/>
<parameter id="PointZOut"/>
<parameter id="PolySequence"/>
<parameter id="PolySequenceOut"/>
<parameter id="Radius"/>
<parameter id="XOff"/>
<parameter id="YOff"/>
</parameters>
</docu>
</procedure>
<procedure name="add_circle_offset">
<interface>
<ic>
<par name="XOff" base_type="ctrl" dimension="0"/>
<par name="YOff" base_type="ctrl" dimension="0"/>
<par name="Radius" base_type="ctrl" dimension="0"/>
<par name="PointX" base_type="ctrl" dimension="0"/>
<par name="PointY" base_type="ctrl" dimension="0"/>
<par name="PointZ" base_type="ctrl" dimension="0"/>
<par name="PolySequence" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="PointXOut" base_type="ctrl" dimension="0"/>
<par name="PointYOut" base_type="ctrl" dimension="0"/>
<par name="PointZOut" base_type="ctrl" dimension="0"/>
<par name="PolySequenceOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>PointXOut := PointX</l>
<l>PointYOut := PointY</l>
<l>PointZOut := PointZ</l>
<l>PolySequenceOut := PolySequence</l>
<l>gen_circle_contour_xld (ContCircle, XOff, YOff, Radius, 0, 6.28318, 'positive', 0.05 * Radius)</l>
<l>get_contour_xld (ContCircle, Row, Col)</l>
<l>Sequence := [|Row|,|PointX| + [0:1:|Row| - 1]]</l>
<l>PointXOut := [PointXOut,Row]</l>
<l>PointYOut := [PointYOut,Col]</l>
<l>tuple_gen_const (|Row|, 0, Zeros)</l>
<l>PointZOut := [PointZOut,Zeros]</l>
<c></c>
<l>PolySequenceOut := [PolySequenceOut,Sequence]</l>
<c></c>
<l>return ()</l>
</body>
<docu id="add_circle_offset">
<parameters>
<parameter id="PointX"/>
<parameter id="PointXOut"/>
<parameter id="PointY"/>
<parameter id="PointYOut"/>
<parameter id="PointZ"/>
<parameter id="PointZOut"/>
<parameter id="PolySequence"/>
<parameter id="PolySequenceOut"/>
<parameter id="Radius"/>
<parameter id="XOff"/>
<parameter id="YOff"/>
</parameters>
</docu>
</procedure>
<procedure name="create_caltab_object_model">
<interface>
<ic>
<par name="XNum" base_type="ctrl" dimension="0"/>
<par name="YNum" base_type="ctrl" dimension="0"/>
<par name="MarkDist" base_type="ctrl" dimension="0"/>
<par name="DiameterRatio" base_type="ctrl" dimension="0"/>
<par name="FinderX" base_type="ctrl" dimension="0"/>
<par name="FinderY" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_empty_object_model_3d (ObjectModel3D)</l>
<l>PointX := []</l>
<l>PointY := []</l>
<l>PointZ := []</l>
<l>PolySequence := []</l>
<l>XOff := 0.0</l>
<l>YOff := 0.0</l>
<l>Radius := 0.5 * DiameterRatio * MarkDist</l>
<l>Spacing := MarkDist</l>
<l>NumX := XNum</l>
<l>NumY := YNum</l>
<c></c>
<l>SpacingY := sqrt(0.75) * Spacing</l>
<c></c>
<l>OffsetX := (NumX / 2) * Spacing - 0.25 * Spacing</l>
<l>OffsetY := (NumY / 2) * SpacingY</l>
<c></c>
<c>* coordinates of all finder pattern marks</c>
<l>FX := [FinderX,FinderX + 1,FinderX,FinderX,FinderX + 1,FinderX + 1,FinderX - 1]</l>
<l>FY := [FinderY,FinderY - 1,FinderY - 1,FinderY + 1,FinderY,FinderY + 1,FinderY]</l>
<l>FX[5] := FX[5] - 1</l>
<l>FX[10] := FX[10] - 1</l>
<l>FX[15] := FX[15] - 1</l>
<l>FX[25] := FX[25] - 1</l>
<c></c>
<l>Linear := XNum * FY + FX</l>
<l>XSeq := [0:1:XNum - 1]</l>
<l>YSeq := gen_tuple_const(XNum,0)</l>
<l>AllX := []</l>
<l>AllY := []</l>
<l>for R := 0 to YNum - 1 by 1</l>
<l>    AllX := [AllX,XSeq]</l>
<l>    AllY := [AllY,YSeq + R]</l>
<l>endfor</l>
<l>RX := remove(AllX,Linear)</l>
<l>RY := remove(AllY,Linear)</l>
<c>* add all marks except the finder pattern marks</c>
<l>for I := 0 to |RX| - 1 by 1</l>
<l>    X := RX[I]</l>
<l>    Y := RY[I]</l>
<l>    if (Y % 2 == 1)</l>
<l>add_circle_offset (-OffsetX + (X - 0.25) * Spacing, -OffsetY + Y * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>    else</l>
<l>add_circle_offset (-OffsetX + (X + 0.25) * Spacing, -OffsetY + Y * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>StartPhi := [rad(90),rad(180),rad(0),rad(0),rad(270)] - rad(45)</l>
<l>EndPhi := [rad(180),rad(270),rad(0),rad(90),rad(360)] + rad(45)</l>
<l>StartPhi[2] := EndPhi[2]</l>
<c></c>
<c></c>
<c>* add first finder</c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[0] - 1 + 0.25) * Spacing, -OffsetY + (FinderY[0] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[0] + 0.25) * Spacing, -OffsetY + (FinderY[0] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[0] - 1 - 0.25) * Spacing, -OffsetY + FinderY[0] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[0] - 0.25) * Spacing, -OffsetY + FinderY[0] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[0] + 1 - 0.25) * Spacing, -OffsetY + FinderY[0] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[0] - 1 + 0.25) * Spacing, -OffsetY + (FinderY[0] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[0] + 0.25) * Spacing, -OffsetY + (FinderY[0] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<c>* add scnd finder</c>
<l>Fdx := 1</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] + 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<c></c>
<c>* add third finder</c>
<l>Fdx := 2</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] + 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<c></c>
<c>* add fourth finder</c>
<l>Fdx := 3</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] + 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<c></c>
<c>* add fifth finder</c>
<l>Fdx := 4</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] - 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 1 + 0.25) * Spacing, -OffsetY + FinderY[Fdx] * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>add_circle_with_hole_offset (-OffsetX + (FinderX[Fdx] - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<l>add_circle_offset (-OffsetX + (FinderX[Fdx] + 1 - 0.25) * Spacing, -OffsetY + (FinderY[Fdx] + 1) * SpacingY, Radius, PointX, PointY, PointZ, PolySequence, PointX, PointY, PointZ, PolySequence)</l>
<c></c>
<l>set_object_model_3d_attrib_mod (ObjectModel3D, ['point_coord_x','point_coord_y','point_coord_z'], [], [PointX,PointY,PointZ])</l>
<l>set_object_model_3d_attrib_mod (ObjectModel3D, 'polygons', [], PolySequence)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="create_caltab_object_model">
<parameters>
<parameter id="DiameterRatio"/>
<parameter id="FinderX"/>
<parameter id="FinderY"/>
<parameter id="MarkDist"/>
<parameter id="ObjectModel3D"/>
<parameter id="XNum"/>
<parameter id="YNum"/>
</parameters>
</docu>
</procedure>
<procedure name="create_models">
<interface>
<oc>
<par name="MarksModel" base_type="ctrl" dimension="0"/>
<par name="PlateModel" base_type="ctrl" dimension="0"/>
<par name="CamModel" base_type="ctrl" dimension="0"/>
<par name="BaseModel" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* Calibration target characteristics</c>
<l>XNum := 31</l>
<l>YNum := 27</l>
<l>FinderX := [15,6,24,6,24]</l>
<l>FinderY := [13,6,6,20,20]</l>
<l>MarkDist := 0.00258065</l>
<l>DiameterRatio := 0.5</l>
<c></c>
<c>* Create the model containing the calibration marks</c>
<l>create_caltab_object_model (XNum, YNum, MarkDist, DiameterRatio, FinderX, FinderY, MarksModel)</l>
<c></c>
<c>* Create the model containing the calibration object (without marks)</c>
<l>create_pose (0.0, 0.0, 0.0005, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<l>gen_box_object_model_3d (Pose, (XNum + 2) * MarkDist, (YNum + 2) * sqrt(0.75) * MarkDist, 0.00099, PlateModel)</l>
<c></c>
<l>create_pose (0.0, 0.0, 0.0005, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose)</l>
<c>* Create models for camera and base plane</c>
<l>gen_box_object_model_3d (Pose, 0.02, 0.02, 0.03, CamModel)</l>
<l>gen_box_object_model_3d (Pose, 0.15, 0.15, 0.001, BaseModel)</l>
<l>return ()</l>
</body>
<docu id="create_models">
<parameters>
<parameter id="BaseModel"/>
<parameter id="CamModel"/>
<parameter id="MarksModel"/>
<parameter id="PlateModel"/>
</parameters>
</docu>
</procedure>
</hdevelop>
